services:
  eureka:
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=./eureka
    image: ${ECR_REGISTRY}/${ECR_NAMESPACE}/eureka
    environment:
      - TZ=Asia/Seoul
    env_file:
      - .env

  gateway:
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=./gateway
    image: ${ECR_REGISTRY}/${ECR_NAMESPACE}/gateway
    environment:
      - TZ=Asia/Seoul
    env_file:
      - .env
    ports:
      - "8080:8080"
    depends_on:
      - eureka

  user:
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=./user
    image: ${ECR_REGISTRY}/${ECR_NAMESPACE}/user
    environment:
      - TZ=Asia/Seoul
    env_file:
      - .env

  review:
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=./review
    image: ${ECR_REGISTRY}/${ECR_NAMESPACE}/review
    environment:
      - TZ=Asia/Seoul
    env_file:
      - .env

  review-redis:
    image: "redis/redis-stack"
    container_name: review-redis
    restart: always
    ports:
      - "${REVIEW_REDIS_PORT}:6379"
    environment:
      - REDIS_ARGS=--requirepass ${REVIEW_REDIS_PASSWORD}
    volumes:
      - review-redis-prod-data:/data
      - review-redis-config-file:/usr/local/etc/redis/redis.conf

  performance:
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=./performance
    image: ${ECR_REGISTRY}/${ECR_NAMESPACE}/performance
    environment:
      - TZ=Asia/Seoul
    env_file:
      - .env

  performance-redis:
    image: "redis/redis-stack"
    container_name: performance-redis
    restart: always
    ports:
      -  "6380:6379"
    environment:
      - REDIS_ARGS=--requirepass ${PERFORMANCE_REDIS_PASSWORD}
    volumes:
      - performance-redis-prod-data:/data
      - performance-redis-config-file:/usr/local/etc/redis/redis.conf

  order:
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=./order
    image: ${ECR_REGISTRY}/${ECR_NAMESPACE}/order
    environment:
      - TZ=Asia/Seoul
    env_file:
      - .env

  order-redis:
    image: "redis/redis-stack"
    container_name: order-redis
    restart: always
    ports:
      - "6381:6379"
    environment:
      - REDIS_ARGS=--requirepass ${ORDER_REDIS_PASSWORD}
    volumes:
      - order-redis-prod-data:/data
      - order-redis-config-file:/usr/local/etc/redis/redis.conf

  payment:
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=./payment
    image: ${ECR_REGISTRY}/${ECR_NAMESPACE}/payment
    environment:
      - TZ=Asia/Seoul
    env_file:
      - .env

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://${EC2_HOST}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "${KAFKA_UI_PORT}:8081"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_CLUSTERS_0_READONLY: "false"


volumes:
  review-redis-prod-data:
  review-redis-config-file:
  performance-redis-prod-data:
  performance-redis-config-file:
  order-redis-prod-data:
  order-redis-config-file:
